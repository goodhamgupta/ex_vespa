<% alias ExVespa.Package.{Document, Field} %>schema <%= schema.name %> {
    document <%= if schema.document.inherits, do: "#{schema.name}" %> {
        <%= Enum.map(Document.fields(schema.document), fn field -> %>field <%= field.name %> type <%= field.type %> {
            <%= if field.indexing, do: "indexing: #{Field.indexing_to_text(field)}" %><%= if field.index do %>
            <%="index: #{field.index}" %><% end %>
            <%= if (field.ann != nil and field.ann == true) or (field.attribute != nil) do %>
            attribute {<%= if (field.ann != nil and field.ann == true) do %>
                <%= "distance-metric: #{field.ann.distance_metric}" %><% end %>
                <%= if field.attribute do %><%= Enum.map(field.attribute, fn attribute -> "#{attribute}\n" end) %><% end %>
            }<% end %><%= if (field.ann != nil and field.ann == true) or (field.attribute != nil) do %>
            index {
                hnsw {
                    max-links-per-node: <%= field.ann.max_links_per_node %>
                    neighbors-to-explore-at-insert: <%= field.ann.neighbors_to_explore_at_insert %>
                }
            }<% end %><%= if field.match do %>
            match {<%= Enum.map(field.match, fn {first, second} = match -> if is_binary(match), do: "#{match}\n", else: "#{first}:#{second}\n" end) %>}<% end %>
            }
            <% end) %>
        }
    }
}
